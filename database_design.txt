database --> collection of data  
database management system ---> manage the database 
relational database  --> collection of data with relationship inbetween them 
reational database management system --> manages the reational database 

Relational database --> Tuple Relational caluculas 

RELATIONSHIP  is CONNECTION between DATA 
ENTITY - anything we store data about 
ATTRIBUTE - the data we store about an ENTITY

    row        column 
    record     attribute 
    tuple      field  
    relation   table , file 

* each row points to different entities 
* each column points to different attribute about an ENTITY

                                         .---------  database 1
            query <--------> dbms <----->|---------  database 2
                                         '---------  database 3 

VIEW MECHANISM --> fetching specific data 
               --> security mechanism 
               --> different people have different access to data

TRANSCATION --> successs
            --> failure 
            --> no partial update 



JOINS ---> combining multiple tables and creating a new view 

NAMING CONVENTION  -->  SQL COMMANDS , identifiers 


DATABASE DESIGN  - conceptual , logical , physical
---------------
* data integerity --> correct , updated , no repeating data , no old data , no disconnected data 
* normalization  


WHAT IF WE PUT EVERYTHING IN A SINGLE TABLE
-------------------------------------------

USER
------------------------------.
name      id       products   |                           
------------------------------'
kavi      23       iphone 6   |
kavi      23       moto g4    |
------------------------------'
as we see above , we have store name and id two times , it creates redundancy 
if we update the name, we have to update the name in two rows 


PURCHASES
------------------.
name    product   |
------------------'
kavi    moto g4   |
kavi    iphone 6  |
------------------'

so we have to use different tables for different entities 

RELATION -- mathemcatical connection between sets 

DATA INTEGRITY --> accuracy , consistency  
--------------
* Entity integerity      - Primary Key --- uniqueness among entity in a table                -  no unique attribute in a table 
* Referential integerity - Foreign Key  - relationship between tables must be persistent     - a comment without a table
* Domain integrity       - column must have correct specific value, within range - DATA TYPE - a string in a phone number column 

--> incorrect data
--> broken relationship
--> un updated data     


ANAMOLIES --> unexpected behaviour 


DATA BASE Terms 
----------------
data , database , relational database , database management system , relational database management system ,  
NULL --> an empty column 
ANAMOLIES --> erros in data integrity 
INTEGRITY --> entity , Referential , domain 
ENTITY --> a table name (noun)
SCHEMA --> drawn out structure  
NORMALIZATION --> reducing dependancy and redundancy
KEYS -->  
views --> fetching data from database and showing differenty , views often use joins 
joins --> fetching data from different tables and combining them to create a new view 

* SQL --> the langauge dbms can understand 
* DDL  --> data definition langauge   CREATE , ALTERA 
* DML  --> data manipulation langauge  INSERT INTO , UPDATE  
* DCL  --> data control langauge  
* TCL  --> transcation control langauge  
* DQL  --> data query langauge  SELECT 


ATOMIC VALUES - a attribute must store only one thing 
-------------
* a column should store exactly one thing
* the thing must be singular 
for example a column NAME should not contain FIRST_NAME + SECOND_NAME + THIRD_NAME 
             0        1         2
NAME    -->   first   second     third 

ADDRESS  ->   street   home_number  village district 

Favourite movies --> even though this column stores exactly one thing , Favourite movies 
                 --> it should be singular 
                 --> a single column must have only one value 
                 --> we have to store multiple values into multiple columns

before we learning about relationship we have to understand some database constraints.  


************************************************************************************************************
PRIMARY KEY --> if a column is set to be primary key , it cannot have null or duplicate values
FOREIGN KEY --> if a column is foreign key , then it must have any value of the column which it referencing 
************************************************************************************************************

we cannot remove parent before deleting child which has relationship with the parent.
we cannot delete user_account before deleting cart of the user and other tables where we have parent-child relationship.


RELATIONSHIP
------------
take one big table and break it into multiple small table and maintain relationship inbetween them


                     DATABASE 

                 --------table1 ---- attribute_1
                                ---- attribute_2
                                ---- attribute_3

                 --------table2 ---- attribute_1
                                ---- attribute_2
                                ---- attribute_3

                 --------table2 ---- attribute_1
                                ---- attribute_2
                                ---- attribute_3
                
                 --------table2 ---- attribute_1
                                ---- attribute_2
                                ---- attribute_3
types 
------
1. One to one 
2. One to many 
3. Many to one  --> we just reverse the table ( we exchange parent and child ) 
4. Many to many 



Many to one relationship
------------------------
many to one and one to many are same. it is just how we see the relationship. 
MANY --> child table |
ONE --> parent table |
so the table which is going to have less number of rows will be the parent table.
the table which is going to have more number of table will be child table and will have FOREIGN KEY !

ONE TO ONE  --> one column exactly has connection with another one column 
----------
* one entity have connection with one other entity 

  a person have a only one social security number
  a husband has one wife
  a wife has one husband 

      entity <--------> entity 
          
* mostly one to one relationship are kept as attribute in a table. 
* as only one entity is going to have relationship with only one entity it stays in a table as attribute
* so rather than storing it as an entity in another table we are stroing it as attribute
* ONE TO ONE REALATIONSHIPS ARE MOSTLY STAYS AS ATTRIBUTE IN THE SAME TABLE.
* on special occasions only it comes in separate table.
* if the attribute has so much data associated with it we can able to put in another table and give one to one relationship.
  even though it is one to one. 
* exactly only one column for one entity. that is when one to one relationship occurs.  
* sometimes we put it in the same table if it is simple enough to store it in the table.     
* if we have multiple attribute associated with it we store it another table making relationship with another table.   

 A TABLE MUST BE ABOUT ONLY ONE ENTITY --> if we store much about another entity in the same table we have to create another 
 table and make sure that we store about only one thing in a table. 

USER (bad one) 
---------.---------.-----.-------------.---------.------------------.-------------.-------------.
 user_id | user_id | age | card_number | card_id | card_issued_date | min_balance | max_balance |
---------'---------'-----'-------------'---------'------------------'-------------'-------------'
the above table must about only one entity that is about users. but it is about USERS+CARD.so it is a  bad design.


USER (good one)                 CARD (good one)
---------.---------.-----.      .-------------.---------.------------------.-------------.-------------.
 user_id | user_id | age |      | card_number | card_id | card_issued_date | min_balance | max_balance |
---------'---------'-----'      '-------------'---------'------------------'-------------'-------------'


connecting two tables for one to one relationship
-------------------------------------------------

in the below table a user can have only on product

USER                      CARD           
----                      ----
user_id (Primary_key)     card_id (Primary_Key)
                          user_id (Foreign_key) UNIQUE --> so only one product can be owned by one user 


in the below table a user must have a product

USER                      CARD 
----                      ----
user_id(PK)               card_id(PK)
card_id(FK)               user_id(FK)

_______________________________________________________________________________________________________________________________________________________

ONE TO MANY - a single column connect with more than one column   
-----------  
* one entity have connection with multiple entity

  a user can have multiple posts 
  a user can have multiple email addresses 
  a king can have many wifes. but the wifes have only one husband king.

   entity <------> entity 
          <------> entity 
          <------> entity 
          <------> entity 

we can't have one to many relationship with single table. we have to have atleast two tables to make one to many relationship.
_______________________________________________________________________________________________________________________________________________________

MANY TO MANY RELATIONSHIP --> we can't able to do many to many relationship in relational database
-------------------------
1.  a men can marry multiple women <-> a women can marry multiple men. 
2. a student can take multiple classes <-> a class can have multiple students 
    
    table   +    intermediate table   +   table
    ------------------------------------------- 
    student      enrollments             classes    
    men          relationship            women 

------------------------------.
 one to | many  many | to one |
------------------------------'
_______________________________________________________________________________________________________________________________________________________

INSIGHTS
--------
* OneToOne Relationship --> when one entity is related with only one other entity and the other entity also related with only one entity.
so we can store it as attribute instead of entity.sometimes even if one entity is related to other entity and other entity also related to only
one entity we have to store much about the other entity. so we can't store about two things in a table. so we have to create separate table
for that one to one relationship and use foreign key with unique attribute to enforce one to one relationship instead of one to many relationship.
Even when we store one to one relationship within the same table we have to use UNIQUE attribute for enforcing one to one relationship.

_______________________________________________________________________________________________________________________________________________________  

KEYS  --> a key keeps everythig unique in a table  
----
* Kes is a constraint 
* index is a data structure

keys the following properties
-----------------------------
1. keys must be unique
2. keys should not change 
3. keys should not be null

INDEX is used to implement keys. Because when we implement keys we have to check for some conditions like it should not be duplicate or 
be null.so creating and index for keys will help check the constraints fast. 


LOOKUP TABLE
------------
lets understand the need for a lookup table. 

user_table
-----------   
user_id    user_name  membeship
-------------------------------
1          naveen     golden
2          prabu      silver 
3          jack       plantinum
4          kavi       bronze 
5          vishnu     golden
6          ravi       silver
7          binu       bronze 


* in the above table at membeship column we have repeating values.so it takes lot of storage.
* when user enters a invalid entry in membeship , we don't have any kind of protection against that. so it violates
  domain integrity. 
* when we change the membership names , we have to change in all other tables which has relationship with this table. 



with lookup table
-----------------

user_table
----------
user_id    user_name  membeship 
-------------------------------
1          naveen     1 
2          prabu      2 
3          jack       3 
4          kavi       4 
5          vishnu     1 
6          ravi       2 
7          binu       4 


membership_lookup_table
------------------------
id  membership
--------------
1   golden
2   silver 
3   plantinum
4   bronze

so the above is the optimized solution. we can make change in single table and no need to change in any other table.


types of keys
-------------
1. primary key
2. foreign key
3. secondary key - alternate key 
4. surrogate key
5. composite key
6. compound key
7. candidate key 
8. natural key - Business Key  or Domain Key
9. super key 
11. unique key  
12. minimal super key 












































   



































































